name: 程式碼品質檢查

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main, deve ]

jobs:
  lint-backend:
    name: 後端 Lint 檢查
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 設定 Go 環境
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: backend/go.sum

      - name: Lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.56
          working-directory: backend
          args: --timeout=5m
          
  test-backend:
    name: 後端單元測試
    runs-on: ubuntu-latest
    needs: lint-backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: security_intel_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: 設定 Go 環境
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
          cache: true
          cache-dependency-path: backend/go.sum

      - name: 運行測試
        working-directory: backend
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENV: testing
          DB_HOST: localhost
          DB_PORT: 5432
          DB_NAME: security_intel_test
          DB_USER: postgres
          DB_PASSWORD: postgres

      - name: 上傳測試覆蓋率
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.out
          flags: backend
          fail_ci_if_error: false

  lint-frontend:
    name: 前端 Lint 檢查
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 設定 Node.js 環境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 安裝依賴
        working-directory: frontend
        run: npm ci

      - name: ESLint 檢查
        working-directory: frontend
        run: npm run lint
        
  test-frontend:
    name: 前端單元測試
    runs-on: ubuntu-latest
    needs: lint-frontend

    steps:
      - uses: actions/checkout@v3

      - name: 設定 Node.js 環境
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: 安裝依賴
        working-directory: frontend
        run: npm ci

      - name: 運行測試
        working-directory: frontend
        run: npm test -- --coverage
        
  terraform-validate:
    name: Terraform 驗證
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 設定 Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.0'

      - name: Terraform 格式檢查
        working-directory: terraform
        run: terraform fmt -check -recursive

      - name: Terraform 初始化
        working-directory: terraform/environments/dev
        run: terraform init -backend=false

      - name: Terraform 驗證
        working-directory: terraform/environments/dev
        run: terraform validate

  test-quantum-service:
    name: 量子服務測試
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 設定 Python 環境
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: services/quantum-predictor/requirements.txt

      - name: 安裝量子服務依賴
        working-directory: services/quantum-predictor
        run: pip install -r requirements.txt

      - name: 運行量子服務測試
        working-directory: services/quantum-predictor
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml
        env:
          IBMQ_API_KEY: ${{ secrets.IBMQ_API_KEY }}
          USE_REAL_DEVICE: 'false'

      - name: 上傳量子服務測試覆蓋率
        uses: codecov/codecov-action@v3
        with:
          file: ./services/quantum-predictor/coverage.xml
          flags: quantum-service
          fail_ci_if_error: false

  security-scan:
    name: 安全性掃描
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 運行 Trivy 檢查
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          exit-code: '1'
          severity: 'CRITICAL,HIGH'

      - name: 初始化 CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: 'go, javascript, typescript'

      - name: 執行 CodeQL 分析
        uses: github/codeql-action/analyze@v2
