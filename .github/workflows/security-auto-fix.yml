name: 安全問題自動修復

on:
  # 手動觸發
  workflow_dispatch:
    inputs:
      fix_nginx:
        description: '修復 Nginx 配置問題'
        type: boolean
        default: true
      fix_dockerfile:
        description: '修復 Dockerfile 問題'
        type: boolean
        default: true
      fix_terraform:
        description: '修復 Terraform 問題'
        type: boolean
        default: true
      create_pr:
        description: '建立 Pull Request'
        type: boolean
        default: true

  # 每週自動執行
  schedule:
    - cron: '0 2 * * 1'  # 每週一凌晨2點

jobs:
  security-auto-fix:
    name: 自動修復安全問題
    runs-on: ubuntu-latest
    
    steps:
      - name: 檢出程式碼
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: 設定 Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: 安裝 Semgrep
        run: |
          python -m pip install --upgrade pip
          pip install semgrep
          
      - name: 安裝修復工具
        run: |
          pip install pyyaml requests
          
      - name: 執行 Semgrep 掃描
        id: semgrep_scan
        run: |
          echo "執行 Semgrep 安全掃描..."
          semgrep scan --config auto --json --output semgrep-results.json || true
          
          # 解析結果
          if [ -f semgrep-results.json ]; then
            python -c "import json; import sys; data=json.load(open('semgrep-results.json')); findings=data.get('results', []); print(f'發現 {len(findings)} 個問題'); sys.exit(0 if findings else 1)"
            echo "findings_count=$(python -c "import json; data=json.load(open('semgrep-results.json')); print(len(data.get('results', [])))")" >> $GITHUB_OUTPUT
          else
            echo "findings_count=0" >> $GITHUB_OUTPUT
          fi
          
      - name: 修復 Nginx 配置問題
        if: ${{ inputs.fix_nginx }}
        run: |
          echo "修復 Nginx 配置安全問題..."
          
          # 修復 nginx.conf 中的安全標頭問題
          if [ -f nginx/nginx.conf ]; then
            # 備份原始檔案
            cp nginx/nginx.conf nginx/nginx.conf.backup
            
            # 修復 add_header 問題
            sed -i 's/add_header Content-Type text\/plain;/add_header Content-Type text\/plain always;/g' nginx/nginx.conf
            
            # 修復 H2C 走私問題 - 限制 Upgrade 標頭
            sed -i '/proxy_set_header Upgrade/a\    # 限制 Upgrade 標頭以防止 H2C 走私\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection "upgrade";' nginx/nginx.conf
            
            echo "Nginx 配置已修復"
          fi
          
      - name: 修復 Dockerfile 問題
        if: ${{ inputs.fix_dockerfile }}
        run: |
          echo "修復 Dockerfile 安全問題..."
          
          # 修復 services/llm-reporter/Dockerfile
          if [ -f services/llm-reporter/Dockerfile ]; then
            # 備份原始檔案
            cp services/llm-reporter/Dockerfile services/llm-reporter/Dockerfile.backup
            
            # 添加非 root 用戶
            sed -i '/CMD \["python", "app.py"\]/i\\n# 創建非 root 用戶\nRUN adduser --disabled-password --gecos "" appuser\nUSER appuser\n' services/llm-reporter/Dockerfile
            
            echo "Dockerfile 已修復"
          fi
          
      - name: 修復 Terraform 問題
        if: ${{ inputs.fix_terraform }}
        run: |
          echo "修復 Terraform 安全問題..."
          
          # 修復 ECS 模組中的 ELB 日誌問題
          if [ -f terraform/modules/ecs/main.tf ]; then
            # 備份原始檔案
            cp terraform/modules/ecs/main.tf terraform/modules/ecs/main.tf.backup
            
            # 添加 ELB 日誌配置
            sed -i '/enable_deletion_protection = var.enable_deletion_protection/a\\n  # 啟用存取日誌\n  access_logs {\n    bucket  = aws_s3_bucket.alb_logs[0].id\n    prefix  = "alb-logs"\n  }\n' terraform/modules/ecs/main.tf
            
            # 修復 TLS 版本問題
            sed -i 's/protocol = "HTTP"/protocol = "HTTPS"\n  ssl_policy = "ELBSecurityPolicy-TLS13-1-2-Res-2021-06"/g' terraform/modules/ecs/main.tf
            
            echo "ECS 模組已修復"
          fi
          
          # 修復 RDS 模組中的加密問題
          if [ -f terraform/modules/rds/main.tf ]; then
            # 備份原始檔案
            cp terraform/modules/rds/main.tf terraform/modules/rds/main.tf.backup
            
            # 添加 KMS 金鑰輪換
            sed -i '/deletion_window_in_days = 7/a\\n  enable_key_rotation = true\n' terraform/modules/rds/main.tf
            
            # 添加 CloudWatch 日誌加密
            sed -i '/retention_in_days = var.log_retention_days/a\\n  kms_key_id = aws_kms_key.rds.arn\n' terraform/modules/rds/main.tf
            
            echo "RDS 模組已修復"
          fi
          
          # 修復 VPC 模組中的子網路問題
          if [ -f terraform/modules/vpc/main.tf ]; then
            # 備份原始檔案
            cp terraform/modules/vpc/main.tf terraform/modules/vpc/main.tf.backup
            
            # 修復公共 IP 地址問題
            sed -i 's/map_public_ip_on_launch = true/map_public_ip_on_launch = false/g' terraform/modules/vpc/main.tf
            
            echo "VPC 模組已修復"
          fi
          
      - name: 驗證修復結果
        run: |
          echo "驗證修復結果..."
          
          # 重新執行 Semgrep 掃描
          semgrep scan --config auto --json --output semgrep-results-after-fix.json || true
          
          # 比較修復前後的結果
          if [ -f semgrep-results.json ] && [ -f semgrep-results-after-fix.json ]; then
            before_count=$(python -c "import json; data=json.load(open('semgrep-results.json')); print(len(data.get('results', [])))")
            after_count=$(python -c "import json; data=json.load(open('semgrep-results-after-fix.json')); print(len(data.get('results', [])))")
            
            echo "修復前問題數量: $before_count"
            echo "修復後問題數量: $after_count"
            
            if [ $after_count -lt $before_count ]; then
              echo "✅ 成功修復了 $((before_count - after_count)) 個安全問題"
              echo "fixed_count=$((before_count - after_count))" >> $GITHUB_OUTPUT
            else
              echo "❌ 沒有修復任何問題"
              echo "fixed_count=0" >> $GITHUB_OUTPUT
            fi
          fi
          
      - name: 建立修復報告
        run: |
          echo "建立修復報告..."
          
          cat > security-fix-report.md << 'EOF'
          # 安全問題自動修復報告
          
          ## 修復摘要
          - **修復前問題數量**: ${{ steps.semgrep_scan.outputs.findings_count }}
          - **修復後問題數量**: $(python -c "import json; data=json.load(open('semgrep-results-after-fix.json')); print(len(data.get('results', [])))" 2>/dev/null || echo "未知")
          - **成功修復數量**: ${{ steps.security-auto-fix.outputs.fixed_count }}
          
          ## 修復的問題類型
          
          ### 1. Nginx 配置問題
          - ✅ 修復了缺少 `always` 標誌的 `add_header` 指令
          - ✅ 修復了 H2C 走私漏洞，限制 Upgrade 標頭
          
          ### 2. Dockerfile 安全問題
          - ✅ 添加了非 root 用戶以提升容器安全性
          
          ### 3. Terraform 安全問題
          - ✅ 啟用了 ELB 存取日誌
          - ✅ 升級了 TLS 版本到安全版本
          - ✅ 啟用了 KMS 金鑰輪換
          - ✅ 添加了 CloudWatch 日誌加密
          - ✅ 修復了子網路公共 IP 地址問題
          
          ## 建議的後續行動
          1. 審查所有修復的變更
          2. 在測試環境中驗證修復效果
          3. 更新相關的部署文檔
          4. 建立安全掃描的持續整合流程
          
          ## 注意事項
          - 所有原始檔案都已備份（.backup 副檔名）
          - 建議在部署前進行完整的測試
          - 某些修復可能需要額外的 AWS 資源配置
          EOF
          
      - name: 建立 Pull Request
        if: ${{ inputs.create_pr && steps.security-auto-fix.outputs.fixed_count > 0 }}
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🔒 自動修復安全問題"
          title: "🔒 自動修復 Semgrep 發現的安全問題"
          body: |
            ## 安全問題自動修復
            
            此 PR 自動修復了 Semgrep 掃描發現的安全問題：
            
            - **修復前問題數量**: ${{ steps.semgrep_scan.outputs.findings_count }}
            - **成功修復數量**: ${{ steps.security-auto-fix.outputs.fixed_count }}
            
            ### 修復的問題類型：
            1. **Nginx 配置問題** - 修復了安全標頭和 H2C 走私漏洞
            2. **Dockerfile 安全問題** - 添加了非 root 用戶
            3. **Terraform 安全問題** - 啟用了加密、日誌記錄等安全功能
            
            ### 變更檔案：
            - `nginx/nginx.conf` - 修復安全標頭配置
            - `services/llm-reporter/Dockerfile` - 添加非 root 用戶
            - `terraform/modules/ecs/main.tf` - 啟用 ELB 日誌和 TLS 安全版本
            - `terraform/modules/rds/main.tf` - 啟用 KMS 輪換和日誌加密
            - `terraform/modules/vpc/main.tf` - 修復子網路公共 IP 問題
            
            ### 注意事項：
            - 所有原始檔案都已備份
            - 建議在部署前進行完整測試
            - 某些修復可能需要額外的 AWS 資源配置
            
            詳細報告請參考：security-fix-report.md
          branch: security-auto-fix-$(date +%Y%m%d-%H%M%S)
          base: main
          delete-branch: true
          
      - name: 上傳修復報告
        uses: actions/upload-artifact@v3
        with:
          name: security-fix-report
          path: |
            security-fix-report.md
            semgrep-results.json
            semgrep-results-after-fix.json
          retention-days: 30
