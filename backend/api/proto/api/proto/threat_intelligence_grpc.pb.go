// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/threat_intelligence.proto

package threatpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ThreatIntelligenceService_GetThreatIntelligence_FullMethodName    = "/threat_intelligence.ThreatIntelligenceService/GetThreatIntelligence"
	ThreatIntelligenceService_ListThreatIntelligence_FullMethodName   = "/threat_intelligence.ThreatIntelligenceService/ListThreatIntelligence"
	ThreatIntelligenceService_CreateThreatIntelligence_FullMethodName = "/threat_intelligence.ThreatIntelligenceService/CreateThreatIntelligence"
	ThreatIntelligenceService_UpdateThreatIntelligence_FullMethodName = "/threat_intelligence.ThreatIntelligenceService/UpdateThreatIntelligence"
	ThreatIntelligenceService_DeleteThreatIntelligence_FullMethodName = "/threat_intelligence.ThreatIntelligenceService/DeleteThreatIntelligence"
	ThreatIntelligenceService_SearchThreatIntelligence_FullMethodName = "/threat_intelligence.ThreatIntelligenceService/SearchThreatIntelligence"
	ThreatIntelligenceService_GetThreatStatistics_FullMethodName      = "/threat_intelligence.ThreatIntelligenceService/GetThreatStatistics"
	ThreatIntelligenceService_SubscribeThreats_FullMethodName         = "/threat_intelligence.ThreatIntelligenceService/SubscribeThreats"
)

// ThreatIntelligenceServiceClient is the client API for ThreatIntelligenceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 威脅情報服務
type ThreatIntelligenceServiceClient interface {
	// 取得威脅情報
	GetThreatIntelligence(ctx context.Context, in *GetThreatIntelligenceRequest, opts ...grpc.CallOption) (*GetThreatIntelligenceResponse, error)
	// 列出威脅情報
	ListThreatIntelligence(ctx context.Context, in *ListThreatIntelligenceRequest, opts ...grpc.CallOption) (*ListThreatIntelligenceResponse, error)
	// 建立威脅情報
	CreateThreatIntelligence(ctx context.Context, in *CreateThreatIntelligenceRequest, opts ...grpc.CallOption) (*CreateThreatIntelligenceResponse, error)
	// 更新威脅情報
	UpdateThreatIntelligence(ctx context.Context, in *UpdateThreatIntelligenceRequest, opts ...grpc.CallOption) (*UpdateThreatIntelligenceResponse, error)
	// 刪除威脅情報
	DeleteThreatIntelligence(ctx context.Context, in *DeleteThreatIntelligenceRequest, opts ...grpc.CallOption) (*DeleteThreatIntelligenceResponse, error)
	// 搜尋威脅情報
	SearchThreatIntelligence(ctx context.Context, in *SearchThreatIntelligenceRequest, opts ...grpc.CallOption) (*SearchThreatIntelligenceResponse, error)
	// 取得統計資訊
	GetThreatStatistics(ctx context.Context, in *GetThreatStatisticsRequest, opts ...grpc.CallOption) (*GetThreatStatisticsResponse, error)
	// 即時威脅訂閱（streaming）
	SubscribeThreats(ctx context.Context, in *SubscribeThreatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ThreatNotification], error)
}

type threatIntelligenceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreatIntelligenceServiceClient(cc grpc.ClientConnInterface) ThreatIntelligenceServiceClient {
	return &threatIntelligenceServiceClient{cc}
}

func (c *threatIntelligenceServiceClient) GetThreatIntelligence(ctx context.Context, in *GetThreatIntelligenceRequest, opts ...grpc.CallOption) (*GetThreatIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThreatIntelligenceResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_GetThreatIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) ListThreatIntelligence(ctx context.Context, in *ListThreatIntelligenceRequest, opts ...grpc.CallOption) (*ListThreatIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListThreatIntelligenceResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_ListThreatIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) CreateThreatIntelligence(ctx context.Context, in *CreateThreatIntelligenceRequest, opts ...grpc.CallOption) (*CreateThreatIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateThreatIntelligenceResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_CreateThreatIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) UpdateThreatIntelligence(ctx context.Context, in *UpdateThreatIntelligenceRequest, opts ...grpc.CallOption) (*UpdateThreatIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateThreatIntelligenceResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_UpdateThreatIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) DeleteThreatIntelligence(ctx context.Context, in *DeleteThreatIntelligenceRequest, opts ...grpc.CallOption) (*DeleteThreatIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteThreatIntelligenceResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_DeleteThreatIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) SearchThreatIntelligence(ctx context.Context, in *SearchThreatIntelligenceRequest, opts ...grpc.CallOption) (*SearchThreatIntelligenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchThreatIntelligenceResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_SearchThreatIntelligence_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) GetThreatStatistics(ctx context.Context, in *GetThreatStatisticsRequest, opts ...grpc.CallOption) (*GetThreatStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetThreatStatisticsResponse)
	err := c.cc.Invoke(ctx, ThreatIntelligenceService_GetThreatStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threatIntelligenceServiceClient) SubscribeThreats(ctx context.Context, in *SubscribeThreatsRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ThreatNotification], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ThreatIntelligenceService_ServiceDesc.Streams[0], ThreatIntelligenceService_SubscribeThreats_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeThreatsRequest, ThreatNotification]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ThreatIntelligenceService_SubscribeThreatsClient = grpc.ServerStreamingClient[ThreatNotification]

// ThreatIntelligenceServiceServer is the server API for ThreatIntelligenceService service.
// All implementations must embed UnimplementedThreatIntelligenceServiceServer
// for forward compatibility.
//
// 威脅情報服務
type ThreatIntelligenceServiceServer interface {
	// 取得威脅情報
	GetThreatIntelligence(context.Context, *GetThreatIntelligenceRequest) (*GetThreatIntelligenceResponse, error)
	// 列出威脅情報
	ListThreatIntelligence(context.Context, *ListThreatIntelligenceRequest) (*ListThreatIntelligenceResponse, error)
	// 建立威脅情報
	CreateThreatIntelligence(context.Context, *CreateThreatIntelligenceRequest) (*CreateThreatIntelligenceResponse, error)
	// 更新威脅情報
	UpdateThreatIntelligence(context.Context, *UpdateThreatIntelligenceRequest) (*UpdateThreatIntelligenceResponse, error)
	// 刪除威脅情報
	DeleteThreatIntelligence(context.Context, *DeleteThreatIntelligenceRequest) (*DeleteThreatIntelligenceResponse, error)
	// 搜尋威脅情報
	SearchThreatIntelligence(context.Context, *SearchThreatIntelligenceRequest) (*SearchThreatIntelligenceResponse, error)
	// 取得統計資訊
	GetThreatStatistics(context.Context, *GetThreatStatisticsRequest) (*GetThreatStatisticsResponse, error)
	// 即時威脅訂閱（streaming）
	SubscribeThreats(*SubscribeThreatsRequest, grpc.ServerStreamingServer[ThreatNotification]) error
	mustEmbedUnimplementedThreatIntelligenceServiceServer()
}

// UnimplementedThreatIntelligenceServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedThreatIntelligenceServiceServer struct{}

func (UnimplementedThreatIntelligenceServiceServer) GetThreatIntelligence(context.Context, *GetThreatIntelligenceRequest) (*GetThreatIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreatIntelligence not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) ListThreatIntelligence(context.Context, *ListThreatIntelligenceRequest) (*ListThreatIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListThreatIntelligence not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) CreateThreatIntelligence(context.Context, *CreateThreatIntelligenceRequest) (*CreateThreatIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThreatIntelligence not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) UpdateThreatIntelligence(context.Context, *UpdateThreatIntelligenceRequest) (*UpdateThreatIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThreatIntelligence not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) DeleteThreatIntelligence(context.Context, *DeleteThreatIntelligenceRequest) (*DeleteThreatIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteThreatIntelligence not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) SearchThreatIntelligence(context.Context, *SearchThreatIntelligenceRequest) (*SearchThreatIntelligenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchThreatIntelligence not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) GetThreatStatistics(context.Context, *GetThreatStatisticsRequest) (*GetThreatStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThreatStatistics not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) SubscribeThreats(*SubscribeThreatsRequest, grpc.ServerStreamingServer[ThreatNotification]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeThreats not implemented")
}
func (UnimplementedThreatIntelligenceServiceServer) mustEmbedUnimplementedThreatIntelligenceServiceServer() {
}
func (UnimplementedThreatIntelligenceServiceServer) testEmbeddedByValue() {}

// UnsafeThreatIntelligenceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreatIntelligenceServiceServer will
// result in compilation errors.
type UnsafeThreatIntelligenceServiceServer interface {
	mustEmbedUnimplementedThreatIntelligenceServiceServer()
}

func RegisterThreatIntelligenceServiceServer(s grpc.ServiceRegistrar, srv ThreatIntelligenceServiceServer) {
	// If the following call pancis, it indicates UnimplementedThreatIntelligenceServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ThreatIntelligenceService_ServiceDesc, srv)
}

func _ThreatIntelligenceService_GetThreatIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreatIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).GetThreatIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_GetThreatIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).GetThreatIntelligence(ctx, req.(*GetThreatIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_ListThreatIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListThreatIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).ListThreatIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_ListThreatIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).ListThreatIntelligence(ctx, req.(*ListThreatIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_CreateThreatIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreatIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).CreateThreatIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_CreateThreatIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).CreateThreatIntelligence(ctx, req.(*CreateThreatIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_UpdateThreatIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThreatIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).UpdateThreatIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_UpdateThreatIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).UpdateThreatIntelligence(ctx, req.(*UpdateThreatIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_DeleteThreatIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteThreatIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).DeleteThreatIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_DeleteThreatIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).DeleteThreatIntelligence(ctx, req.(*DeleteThreatIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_SearchThreatIntelligence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchThreatIntelligenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).SearchThreatIntelligence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_SearchThreatIntelligence_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).SearchThreatIntelligence(ctx, req.(*SearchThreatIntelligenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_GetThreatStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreatStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreatIntelligenceServiceServer).GetThreatStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ThreatIntelligenceService_GetThreatStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreatIntelligenceServiceServer).GetThreatStatistics(ctx, req.(*GetThreatStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreatIntelligenceService_SubscribeThreats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeThreatsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThreatIntelligenceServiceServer).SubscribeThreats(m, &grpc.GenericServerStream[SubscribeThreatsRequest, ThreatNotification]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ThreatIntelligenceService_SubscribeThreatsServer = grpc.ServerStreamingServer[ThreatNotification]

// ThreatIntelligenceService_ServiceDesc is the grpc.ServiceDesc for ThreatIntelligenceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreatIntelligenceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "threat_intelligence.ThreatIntelligenceService",
	HandlerType: (*ThreatIntelligenceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThreatIntelligence",
			Handler:    _ThreatIntelligenceService_GetThreatIntelligence_Handler,
		},
		{
			MethodName: "ListThreatIntelligence",
			Handler:    _ThreatIntelligenceService_ListThreatIntelligence_Handler,
		},
		{
			MethodName: "CreateThreatIntelligence",
			Handler:    _ThreatIntelligenceService_CreateThreatIntelligence_Handler,
		},
		{
			MethodName: "UpdateThreatIntelligence",
			Handler:    _ThreatIntelligenceService_UpdateThreatIntelligence_Handler,
		},
		{
			MethodName: "DeleteThreatIntelligence",
			Handler:    _ThreatIntelligenceService_DeleteThreatIntelligence_Handler,
		},
		{
			MethodName: "SearchThreatIntelligence",
			Handler:    _ThreatIntelligenceService_SearchThreatIntelligence_Handler,
		},
		{
			MethodName: "GetThreatStatistics",
			Handler:    _ThreatIntelligenceService_GetThreatStatistics_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeThreats",
			Handler:       _ThreatIntelligenceService_SubscribeThreats_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/proto/threat_intelligence.proto",
}
